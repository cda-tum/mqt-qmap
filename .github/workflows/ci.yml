name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 3
  Z3_VERSION: 4.11.2

jobs:
  cpp-tests:
    name: C++ Tests ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              os: ubuntu-20.04,
              platform_version: 20.04,
              toolset: gcc,
              distribution: glibc-2.31,
            }
          - {
              os: macos-11,
              platform_version: 11,
              toolset: clang,
              distribution: osx-10.16,
            }
          - {
              os: windows-2022,
              platform_version: 2022,
              toolset: msvc,
              distribution: win,
            }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install boost
        uses: MarkusJx/install-boost@v2.3.1
        id: install-boost
        with:
          boost_version: 1.79.0
          platform_version: ${{ matrix.config.platform_version }}
          toolset: ${{ matrix.config.toolset }}
      - name: Install Z3
        uses: pavpanchekha/setup-z3@master
        with:
          version: ${{ env.Z3_VERSION }}
          distribution: ${{ matrix.config.distribution }}
      - if: runner.os != 'Windows'
        name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_QMAP_TESTS=ON
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      - if: runner.os == 'Windows'
        name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_QMAP_TESTS=ON -T "ClangCl"
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      - name: Build
        run: cmake --build build --config Release
      - name: Test
        working-directory: build/test
        run: ctest -C Release --output-on-failure
      - if: runner.os == 'Linux'
        name: Coverage
        run: |
          cmake -S . -B buildCov -DCMAKE_BUILD_TYPE=Debug -DBUILD_QMAP_TESTS=ON -DCOVERAGE=ON
          cmake --build buildCov --config Debug
          cd buildCov/test
          ctest -C Debug --output-on-failure
      - if: runner.os == 'Linux'
        name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          gcov: true
          gcov_ignore: "extern/**/*"
