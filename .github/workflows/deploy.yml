name: Python Packaging

on:
  release:
    types: [published]
  pull_request:
  merge_group:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  Z3_VERSION: 4.11.2

jobs:
  build_wheels:
    name: ${{ matrix.config.arch }} wheels on ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, arch: x64 }
          - { os: macos-latest, arch: x64 }
          - { os: macos-latest, arch: arm64 }
          - { os: windows-latest, arch: x64 }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      # Under Linux the action does not work because it can't install to the manylinux container.
      - if: runner.os != 'Linux'
        name: Install Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ env.Z3_VERSION }}
          architecture: ${{ matrix.config.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: ${{ matrix.config.arch == 'arm64' }}
        name: Set Architecture to arm64 if necessary
        run: echo "CIBW_ARCHS_MACOS=arm64" >> $GITHUB_ENV
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.14
        env:
          CIBW_BEFORE_ALL_LINUX: /opt/python/cp39-cp39/bin/pip install z3-solver==${{ env.Z3_VERSION }}
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Z3
        uses: cda-tum/setup-z3@v1
        with:
          version: ${{ env.Z3_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build sdist
        run: pipx run build --sdist
      - name: Test sdist
        run: pip install --verbose dist/*.tar.gz
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_password }}
          skip-existing: true
          verbose: true
