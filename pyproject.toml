[build-system]
requires = [
    "setuptools>=61",
    "setuptools_scm[toml]>=7",
    "ninja>=1.10; sys_platform != 'win32'",
    "cmake>=3.19",
]
build-backend = "setuptools.build_meta"

[project]
name = "mqt.qmap"
description = "A tool for Quantum Circuit Mapping"
readme = "README.md"
authors = [
    { name = "Lukas Burgholzer", email = "lukas.burgholzer@jku.at" },
    { name = "Sarah Schneider", email = "sarah.schneider@jku.at" },
    { name = "Stefan Hillmich", email = "stefan.hillmich@jku.at" },
    { name = "Tom Peham", email = "tom.peham@tum.de" }
]
keywords = ["MQT", "quantum computing", "design automation", "mapping", "compilation", "qubit routing"]
license = { file = "LICENSE.md" }

classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: C++",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]
requires-python = ">=3.8"
dependencies = [
    "qiskit-terra>=0.20.2",
    "rustworkx[all]>=0.12.0",
    "importlib_resources>=5.0; python_version < '3.10'",
]
dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest>=7", "mqt.qcec>=2"]
coverage = ["mqt.qmap[test]", "coverage[toml]>=6.3", "pytest-cov>=3"]
docs = [
    "sphinx>=5",
    "sphinx-rtd-theme",
    "sphinx-rtd-dark-mode",
    "sphinxcontrib-bibtex>=2.4.2",
    "sphinx-copybutton",
    "sphinx-hoverxref",
    "pybtex>=0.24",
    "importlib_metadata>=4.4; python_version < '3.10'",
    "ipython",
    "ipykernel",
    "nbsphinx",
    "sphinxext-opengraph",
    "sphinx-autodoc-typehints",
    "qiskit-terra[visualization]",
]
dev = ["mqt.qmap[coverage, docs]"]

[project.urls]
Homepage = "https://github.com/cda-tum/qmap"
Documentation = "https://mqtqmap.readthedocs.io"
"Bug Tracker" = "https://github.com/cda-tum/qmap/issues"
Discussions = "https://github.com/cda-tum/qmap/discussions"
Research = "https://www.cda.cit.tum.de/research/ibm_qx_mapping/"

[tool.setuptools.packages.find]
include = ["mqt.*"]

[tool.setuptools_scm]

[tool.cibuildwheel]
build = "cp3*"
archs = "auto64"
skip = "*-musllinux*"
test-skip = "*-macosx_arm64"
test-command = "python -c \"from mqt import qmap\""
environment = { DEPLOY = "ON" }
build-frontend = "build"
build-verbosity = 3
manylinux-x86_64-image = "manylinux_2_28"

[tool.cibuildwheel.linux]
environment = { Z3_ROOT="/opt/python/cp39-cp39/lib/python3.9/site-packages/z3", DEPLOY = "ON"}

[tool.cibuildwheel.macos]
archs = "x86_64"
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15", DEPLOY = "ON" }

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -v -w {dest_dir} {wheel}"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["test/python"]
addopts = ["-ra", "--strict-markers", "--strict-config", "--showlocals"]
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    "error",
    # See https://github.com/Qiskit/rustworkx/pull/728
    'ignore:RetworkxLoader.exec_module\(\) not found; falling back to load_module\(\):ImportWarning',
]
[tool.coverage.run]
source = ["mqt.qmap"]

[tool.coverage.report]
show_missing = true
skip_empty = true
precision = 1

[tool.black]
line-length = 120

[tool.mypy]
files = ["mqt/qmap", "test/python", "setup.py"]
python_version = "3.8"
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = ["qiskit.*", "rustworkx.*", "matplotlib.*"]
ignore_missing_imports = true

[tool.pylint]
master.py-version = "3.8"
master.jobs = "0"
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.enable = [
    "useless-suppression",
]
messages_control.disable = [
    "invalid-name",
    "line-too-long",
    "missing-module-docstring",
    "no-member",
    "protected-access",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-branches",
    "too-many-locals",
    "too-many-statements",
    "ungrouped-imports",
    "wrong-import-order",
    "wrong-import-position",
]

[tool.ruff]
select = [
    "E", "F", "W", # flake8
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "N",           # flake8-naming
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "SIM",         # flake8-simplify
    "TCH",         # flake8-type-checking
    "TID",         # flake8-tidy-imports
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "E501",    # Line too long (Black is enough)
    "PLR2004", # Magic values
    "PLR0913", # Too many arguments
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 120

[tool.ruff.per-file-ignores]
"*.pyi" = [
    "ARG001",  # Unused argument
    "D",       # pydocstyle
]

[tool.ruff.pydocstyle]
convention = "google"
